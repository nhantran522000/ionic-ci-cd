name: Mobile CI/CD - Android APK Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: "20.x"
  JAVA_VERSION: "17"

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

      - name: Install required Android SDK components
        run: |
          echo "Installing required Android SDK components..."
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-35" "build-tools;35.0.0" "platforms;android-34" "build-tools;34.0.0"
          echo "Verifying installed components..."
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed | grep -E "(platforms|build-tools)"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.android/cache
            ~/.gradle/caches
          key: ${{ runner.os }}-deps-${{ hashFiles('pnpm-lock.yaml', 'android/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Debug - Check lockfile
        run: |
          echo "Checking for lockfiles..."
          ls -la | grep -E "lock|Lock" || echo "No lockfiles found"
          echo "Current directory contents:"
          ls -la
          echo "Pnpm version:"
          pnpm --version

          # Comprehensive lockfile verification
          if [ ! -f pnpm-lock.yaml ]; then
            echo "ERROR: pnpm-lock.yaml is missing. This will cause dependency issues."
            echo "Please run 'pnpm install' locally and commit the lockfile."
            exit 1
          else
            echo "✅ pnpm-lock.yaml found"
            echo "Lockfile size: $(du -h pnpm-lock.yaml)"
          fi

      - name: Install dependencies
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "Found pnpm-lock.yaml, installing with frozen lockfile"
            pnpm install --frozen-lockfile
          else
            echo "pnpm-lock.yaml is missing. Installing dependencies without frozen lockfile."
            pnpm install --no-frozen-lockfile
          fi

      - name: Install Ionic CLI
        run: npm install -g @ionic/cli @capacitor/cli

      - name: Build Ionic app
        run: ionic build --prod

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Update and verify Gradle wrapper
        run: |
          cd android
          echo "Current Gradle wrapper version:"
          ./gradlew --version
          echo "Updating Gradle wrapper to latest supported version..."
          ./gradlew wrapper --gradle-version 8.11.1
          echo "Updated Gradle wrapper version:"
          ./gradlew --version

      - name: Debug - Check Java and Gradle environment
        run: |
          echo "Java version:"
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Android SDK root: $ANDROID_SDK_ROOT"
          echo "Gradle version:"
          cd android && ./gradlew --version
          echo "Available Android SDK platforms:"
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list | grep "platforms;android" | head -10

      - name: Clean Android project
        run: cd android && ./gradlew clean --stacktrace

      - name: Stop Gradle daemon and clear all caches
        run: |
          cd android
          echo "Stopping any existing Gradle daemons..."
          ./gradlew --stop || true
          echo "Clearing all Gradle caches..."
          rm -rf ~/.gradle/caches/
          rm -rf ~/.gradle/daemon/
          rm -rf .gradle/
          rm -rf build/
          rm -rf app/build/
          echo "✅ All caches cleared"

      - name: Verify clean build environment
        run: |
          cd android
          echo "Verifying clean environment..."
          echo "Gradle daemon status:"
          ./gradlew --status || echo "No Gradle daemons running"
          echo "Build directories:"
          ls -la | grep build || echo "No build directories found"

      - name: Clear Gradle caches (if build fails)
        if: failure()
        run: |
          echo "Clearing Gradle caches..."
          cd android
          ./gradlew clean
          rm -rf ~/.gradle/caches/
          rm -rf .gradle/
          echo "Gradle caches cleared"

      - name: Build Android Debug APK
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process"
        run: cd android && ./gradlew assembleDebug --stacktrace --info --no-daemon

      - name: Build Android Release APK (unsigned)
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process"
        run: cd android && ./gradlew assembleRelease --stacktrace --info --no-daemon

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: android/app/build/outputs/apk/release/app-release-unsigned.apk
          retention-days: 30

      - name: Get APK info
        run: |
          echo "Debug APK size: $(du -h android/app/build/outputs/apk/debug/app-debug.apk | cut -f1)"
          echo "Release APK size: $(du -h android/app/build/outputs/apk/release/app-release-unsigned.apk | cut -f1)"
          echo "Debug APK path: android/app/build/outputs/apk/debug/app-debug.apk"
          echo "Release APK path: android/app/build/outputs/apk/release/app-release-unsigned.apk"
          echo "✅ APK builds completed successfully! You can download them from the artifacts section."
